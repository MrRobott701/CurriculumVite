@using Entidades.DTO.CurriculumVite
@using Entidades.Utilidades
@using Servicios.IRepositorios.CurriculumVite
@using Servicios.IRepositorios
@inject ISRepositorioPublicacion PublicacionServicios
@inject ISRepositorioDocumento DocumentoServicios
@inject IDocumentRepository DocumentRepository
@inject IJSRuntime JSRuntime

<!-- Modal -->
<div class="modal fade" id="modalPublicacion" tabindex="-1" aria-labelledby="modalPublicacionLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #2D6B3C; color: white;">
                <h5 class="modal-title" id="modalPublicacionLabel">
                    <i class="fas fa-book"></i> 
                    @(IsEditing ? "Editar Publicación" : "Nueva Publicación")
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="PublicacionActual" OnValidSubmit="GuardarPublicacion">
                    <DataAnnotationsValidator />
                    
                    <!-- Título -->
                    <div class="mb-3">
                        <label for="titulo" class="form-label">Título *</label>
                        <InputText id="titulo" class="form-control" @bind-Value="PublicacionActual.Titulo" />
                        <ValidationMessage For="@(() => PublicacionActual.Titulo)" />
                    </div>

                    <!-- Tipo de Publicación -->
                    <div class="mb-3">
                        <label for="tipoPublicacion" class="form-label">Tipo de Publicación *</label>
                        <InputSelect id="tipoPublicacion" class="form-select" @bind-Value="PublicacionActual.TipoPublicacion">
                            <option value="">Seleccione un tipo</option>
                            <option value="Artículo de Revista">Artículo de Revista</option>
                            <option value="Libro">Libro</option>
                            <option value="Capítulo de Libro">Capítulo de Libro</option>
                            <option value="Memoria de Congreso">Memoria de Congreso</option>
                            <option value="Tesis">Tesis</option>
                            <option value="Reporte Técnico">Reporte Técnico</option>
                            <option value="Otro">Otro</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => PublicacionActual.TipoPublicacion)" />
                    </div>

                    <!-- Autores -->
                    <div class="mb-3">
                        <label for="autores" class="form-label">Autores</label>
                        <InputTextArea id="autores" class="form-control" rows="2" @bind-Value="PublicacionActual.Autores" 
                                     placeholder="Separar autores con comas"/>
                        <div class="form-text">Ejemplo: García, J., López, M., Smith, R.</div>
                    </div>

                    <!-- Fuente -->
                    <div class="mb-3">
                        <label for="fuente" class="form-label">Fuente/Editorial</label>
                        <InputText id="fuente" class="form-control" @bind-Value="PublicacionActual.Fuente" 
                                 placeholder="Nombre de la revista, editorial, conferencia, etc."/>
                    </div>

                    <!-- Año -->
                    <div class="mb-3">
                        <label for="anio" class="form-label">Año</label>
                        <InputNumber id="anio" class="form-control" @bind-Value="PublicacionActual.Anio" min="1950" max="@DateTime.Now.Year"/>
                    </div>

                    <!-- Enlace -->
                    <div class="mb-3">
                        <label for="enlace" class="form-label">
                            Enlace 
                            <span class="text-muted">(opcional)</span>
                        </label>
                        <InputText id="enlace" class="form-control" @bind-Value="@PublicacionActual.Enlace" 
                                 placeholder="https://... (deje vacío si no tiene enlace)"/>
                        <div class="form-text">Enlace opcional a la publicación online. Si no tiene enlace disponible, puede dejarlo vacío.</div>
                        <ValidationMessage For="@(() => PublicacionActual.Enlace)" />
                    </div>

                    <!-- Subida de Documento -->
                    <div class="mb-3">
                        <label for="documento" class="form-label">
                            Documento de Evidencia 
                            <span class="text-muted">(opcional)</span>
                        </label>
                        <InputFile id="documento" class="form-control" OnChange="OnFileSelected" accept=".pdf,.doc,.docx" />
                        <div class="form-text">Máximo 50MB. El archivo se subirá automáticamente al guardar.</div>
                        @if (!string.IsNullOrEmpty(MensajeArchivo))
                        {
                            <div class="@(EsErrorArchivo ? "text-danger" : "text-success") mt-2">
                                @MensajeArchivo
                            </div>
                        }
                    </div>

                    <!-- Botones -->
                    <div class="modal-footer border-0 px-0 pb-0">
                        <button type="button" class="btn btn-outline-secondary" @onclick="CerrarModal" disabled="@Guardando">
                            <i class="fas fa-times"></i> Cancelar
                        </button>
                        <button type="submit" class="btn" style="background-color: #2D6B3C; color: white;" disabled="@Guardando">
                            @if (Guardando)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Guardando...</span>
                            }
                            else
                            {
                                <i class="fas fa-save"></i>
                                <span>Guardar</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public PublicacionDTO PublicacionActual { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public EventCallback<PublicacionDTO> OnPublicacionGuardada { get; set; }
    [Parameter] public string EmpleadoNombre { get; set; } = "";
    [Parameter] public string NumeroEmpleado { get; set; } = "";

    private IBrowserFile? ArchivoSeleccionado;
    private bool SubiendoArchivo = false;
    private bool Guardando = false;
    private string MensajeArchivo = "";
    private bool EsErrorArchivo = false;
    private string UrlDocumento = "";
    private string DocumentoId = "";
    private string DocumentoPath = "";

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        ArchivoSeleccionado = e.File;
        MensajeArchivo = "";
        EsErrorArchivo = false;
        UrlDocumento = "";
        DocumentoId = "";
        DocumentoPath = "";
        
        // Validar tamaño inmediatamente
        if (ArchivoSeleccionado != null && ArchivoSeleccionado.Size > 50 * 1024 * 1024)
        {
            MensajeArchivo = "El archivo no puede superar los 50MB";
            EsErrorArchivo = true;
            ArchivoSeleccionado = null;
        }
        
        StateHasChanged();
    }

    private async Task<bool> SubirArchivoSiHay()
    {
        if (ArchivoSeleccionado == null) return true; // No hay archivo, continuar

        try
        {
            SubiendoArchivo = true;
            StateHasChanged();

            // Leer el archivo
            using var stream = ArchivoSeleccionado.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var fileData = memoryStream.ToArray();

            // Subir a Google Drive usando DocumentRepository
            var response = await DocumentRepository.SubirDocumentoAsync(
                fileData,
                ArchivoSeleccionado.Name,
                ArchivoSeleccionado.ContentType,
                EmpleadoNombre,
                NumeroEmpleado,
                DocumentType.Publicacion);

            // Procesar respuesta
            if (response.Status == "success" && !string.IsNullOrEmpty(response.Url))
            {
                UrlDocumento = response.Url;
                DocumentoId = response.Id;
                DocumentoPath = response.Path;
                await JSRuntime.InvokeVoidAsync("console.log", $"🇲🇽 Archivo subido correctamente: {response.Path}");
                return true;
            }
            else
            {
                MensajeArchivo = "Error al subir el archivo al Drive";
                EsErrorArchivo = true;
                return false;
            }
        }
        catch (Exception ex)
        {
            MensajeArchivo = $"Error al subir archivo: {ex.Message}";
            EsErrorArchivo = true;
            await JSRuntime.InvokeVoidAsync("console.error", $"🇲🇽 Error subiendo archivo: {ex.Message}");
            return false;
        }
        finally
        {
            SubiendoArchivo = false;
            StateHasChanged();
        }
    }

    private async Task GuardarPublicacion()
    {
        try
        {
            Guardando = true;
            StateHasChanged();

            // Validaciones básicas
            if (string.IsNullOrWhiteSpace(PublicacionActual.Titulo))
            {
                await JSRuntime.InvokeVoidAsync("alert", "🇲🇽 Error: El título es obligatorio");
                return;
            }

            if (string.IsNullOrWhiteSpace(PublicacionActual.TipoPublicacion))
            {
                await JSRuntime.InvokeVoidAsync("alert", "🇲🇽 Error: Debe seleccionar un tipo de publicación");
                return;
            }

            if (PublicacionActual.IdDocente <= 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "🇲🇽 Error: No se pudo identificar el docente");
                return;
            }

            // Validar enlace solo si se proporciona uno
            if (!string.IsNullOrWhiteSpace(PublicacionActual.Enlace))
            {
                if (!Uri.TryCreate(PublicacionActual.Enlace, UriKind.Absolute, out var uriResult) || 
                    (uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "🇲🇽 Error: El enlace debe ser una URL válida que comience con http:// o https://");
                    return;
                }
            }

            // Si hay archivo seleccionado, subirlo primero
            if (ArchivoSeleccionado != null)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "🇲🇽 Subiendo archivo antes de guardar publicación");
                bool archivoSubido = await SubirArchivoSiHay();
                if (!archivoSubido)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "🇲🇽 Error: No se pudo subir el archivo. La publicación no se guardará.");
                    return;
                }
            }

            // Guardar la publicación PRIMERO (esto siempre debe funcionar)
            Entidades.Modelos.CurriculumVite.E_Publicacion publicacionGuardada;
            try
            {
                if (IsEditing)
                {
                    // Actualizar publicación existente
                    var publicacionEntity = new Entidades.Modelos.CurriculumVite.E_Publicacion
                    {
                        IdPublicacion = PublicacionActual.IdPublicacion,
                        IdDocente = PublicacionActual.IdDocente,
                        Titulo = PublicacionActual.Titulo?.Trim(),
                        TipoPublicacion = PublicacionActual.TipoPublicacion?.Trim(),
                        Autores = PublicacionActual.Autores?.Trim(),
                        Fuente = PublicacionActual.Fuente?.Trim(),
                        Anio = PublicacionActual.Anio,
                        Enlace = string.IsNullOrWhiteSpace(PublicacionActual.Enlace) ? null : PublicacionActual.Enlace.Trim()
                    };

                    await PublicacionServicios.UpdateAsync(publicacionEntity);
                    publicacionGuardada = publicacionEntity;
                    await JSRuntime.InvokeVoidAsync("console.log", "🇲🇽 Publicación actualizada correctamente");
                }
                else
                {
                    // Crear nueva publicación
                    var publicacionEntity = new Entidades.Modelos.CurriculumVite.E_Publicacion
                    {
                        IdDocente = PublicacionActual.IdDocente,
                        Titulo = PublicacionActual.Titulo?.Trim(),
                        TipoPublicacion = PublicacionActual.TipoPublicacion?.Trim(),
                        Autores = PublicacionActual.Autores?.Trim(),
                        Fuente = PublicacionActual.Fuente?.Trim(),
                        Anio = PublicacionActual.Anio,
                        Enlace = string.IsNullOrWhiteSpace(PublicacionActual.Enlace) ? null : PublicacionActual.Enlace.Trim()
                    };

                    await PublicacionServicios.AddAsync(publicacionEntity);
                    publicacionGuardada = publicacionEntity; // La entidad ahora tiene el ID generado
                    
                    // Actualizar el DTO con el ID generado para el componente padre
                    PublicacionActual.IdPublicacion = publicacionEntity.IdPublicacion;
                    
                    await JSRuntime.InvokeVoidAsync("console.log", $"🇲🇽 Nueva publicación creada correctamente con ID: {publicacionEntity.IdPublicacion}");
                }
            }
            catch (Exception pubEx)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"🇲🇽 Error crítico: No se pudo guardar la publicación. {pubEx.Message}");
                return;
            }

            // Intentar guardar el documento (esto es opcional, no debe afectar la publicación)
            bool documentoGuardado = false;
            string mensajeDocumento = "";
            
            if (!string.IsNullOrEmpty(UrlDocumento) && !IsEditing)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("console.log", $"🇲🇽 Intentando guardar documento - IdDocente: {PublicacionActual.IdDocente}, IdPublicacion: {publicacionGuardada.IdPublicacion}, URL: {UrlDocumento}");
                    
                    await DocumentoServicios.CreateDocumentoForPublicacionAsync(
                        PublicacionActual.IdDocente,
                        publicacionGuardada.IdPublicacion, // Usar el ID real de la entidad guardada
                        $"Documento de evidencia - {PublicacionActual.Titulo}",
                        UrlDocumento,
                        $"Documento subido desde: {DocumentoPath}"
                    );
                    
                    documentoGuardado = true;
                    mensajeDocumento = "El archivo se subió al Drive y se registró correctamente en la base de datos.";
                    await JSRuntime.InvokeVoidAsync("console.log", "🇲🇽 Documento guardado correctamente en BD");
                }
                catch (Exception docEx)
                {
                    documentoGuardado = false;
                    mensajeDocumento = $"El archivo SÍ se subió al Drive correctamente, pero no se pudo registrar en la base de datos. Error: {docEx.Message}";
                    await JSRuntime.InvokeVoidAsync("console.error", $"🇲🇽 Error al guardar documento en BD: {docEx.Message}");
                }
            }

            // Mostrar mensaje final apropiado
            if (documentoGuardado || string.IsNullOrEmpty(UrlDocumento))
            {
                // Caso exitoso completo
                await JSRuntime.InvokeVoidAsync("alert", $"🇲🇽 ¡Éxito! La publicación se guardó correctamente.{(documentoGuardado ? " " + mensajeDocumento : "")}");
            }
            else
            {
                // Publicación guardada pero documento falló
                await JSRuntime.InvokeVoidAsync("alert", $"✅ PUBLICACIÓN GUARDADA CORRECTAMENTE\n\n⚠️ Problema con el documento:\n{mensajeDocumento}\n\nPuedes agregar el documento manualmente desde la sección de documentos.");
            }

            // Notificar al componente padre
            await OnPublicacionGuardada.InvokeAsync(PublicacionActual);
            
            // Cerrar el modal y limpiar estado
            await CerrarModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"🇲🇽 Error al guardar la publicación: {ex.Message}");
        }
        finally
        {
            Guardando = false;
            StateHasChanged();
        }
    }

    public async Task AbrirModal(PublicacionDTO? publicacion = null, int idDocente = 0)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"🇲🇽 Abriendo modal - Publicación: {publicacion?.IdPublicacion}, IdDocente: {idDocente}");
            
            if (publicacion != null)
            {
                IsEditing = true;  // Set IsEditing to true when editing an existing publication
                PublicacionActual = new PublicacionDTO
                {
                    IdPublicacion = publicacion.IdPublicacion,
                    IdDocente = publicacion.IdDocente,
                    Titulo = publicacion.Titulo,
                    TipoPublicacion = publicacion.TipoPublicacion,
                    Autores = publicacion.Autores,
                    Fuente = publicacion.Fuente,
                    Anio = publicacion.Anio,
                    Enlace = publicacion.Enlace
                };
            }
            else
            {
                IsEditing = false;  // Set IsEditing to false when creating a new publication
                PublicacionActual = new PublicacionDTO
                {
                    IdPublicacion = 0,
                    IdDocente = idDocente,
                    Titulo = "",
                    TipoPublicacion = "",
                    Autores = "",
                    Fuente = "",
                    Anio = null,
                    Enlace = null
                };
            }

            await JSRuntime.InvokeVoidAsync("eval", @"
                (function() {
                    try {
                        const modalElement = document.getElementById('modalPublicacion');
                        if (modalElement) {
                            const modal = new bootstrap.Modal(modalElement, {
                                backdrop: 'static',
                                keyboard: false
                            });
                            modal.show();
                        }
                    } catch (error) {
                        console.error('Error al abrir el modal:', error);
                    }
                })();
            ");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"🇲🇽 Error al abrir el modal: {ex.Message}");
        }
    }

    private async Task CerrarModal()
    {
        try
        {
            // Limpiar estado
            PublicacionActual = new();
            ArchivoSeleccionado = null;
            MensajeArchivo = "";
            EsErrorArchivo = false;
            UrlDocumento = "";
            DocumentoId = "";
            DocumentoPath = "";
            Guardando = false;
            SubiendoArchivo = false;
            IsEditing = false;  // Reset IsEditing when closing the modal

            await JSRuntime.InvokeVoidAsync("eval", @"
                (function() {
                    try {
                        const modalElement = document.getElementById('modalPublicacion');
                        if (modalElement) {
                            // Obtener y cerrar el modal de Bootstrap
                            const modal = bootstrap.Modal.getInstance(modalElement);
                            if (modal) {
                                modal.hide();
                            }

                            // Limpiar manualmente el backdrop y las clases
                            document.body.classList.remove('modal-open');
                            const backdrops = document.getElementsByClassName('modal-backdrop');
                            while (backdrops.length > 0) {
                                backdrops[0].remove();
                            }

                            // Restaurar el scroll
                            document.body.style.overflow = '';
                            document.body.style.paddingRight = '';
                        }
                    } catch (error) {
                        console.error('Error al cerrar el modal:', error);
                    }
                })();
            ");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"🇲🇽 Error al cerrar el modal: {ex.Message}");
        }
    }
} 