@page "/CV/Docentes/{idDocente:int}/Educacion/{idEducacion:int}/Documentos"
@using Entidades.DTO.CurriculumVite
@using Entidades.Modelos.CurriculumVite
@using Servicios.IRepositorios.CurriculumVite
@using Servicios.IRepositorios
@using Entidades.Utilidades
@inject ISRepositorioDocumento DocumentoServicios
@inject ISRepositorioEducacion EducacionServicios
@inject ISDocenteRepositorio DocenteServicios
@inject IDocumentRepository DocumentRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Documentos de Educación - UABC</PageTitle>

<div class="container-fluid" style="background-color: #F8F9FA; min-height: 100vh; padding: 0;">
    @if (CargandoDocumentos)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="text-center">
                <div class="spinner-border text-success" role="status" style="color: #2D6B3C !important;">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-3 text-muted">Cargando documentos de educación...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Header con breadcrumb -->
        <div class="bg-white border-bottom" style="padding: 1.5rem 2rem;">
            <nav aria-label="breadcrumb" class="mb-2">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item">
                        <button type="button" class="btn btn-link p-0" @onclick="VolverAEducacion" style="color: #2D6B3C; text-decoration: none;">
                            <i class="fas fa-arrow-left me-1"></i>Volver a Educación
                        </button>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page" style="color: #2D6B3C;">
                        Documentos - @(educacionActual?.Titulo ?? "Educación")
                    </li>
                </ol>
            </nav>
            <div class="d-flex align-items-center">
                <div class="me-3">
                    <div class="rounded-circle d-flex align-items-center justify-content-center" 
                         style="width: 50px; height: 50px; background-color: #E8F5E8;">
                        <i class="fas fa-file-alt" style="color: #2D6B3C; font-size: 1.5rem;"></i>
                    </div>
                </div>
                <div>
                    <h4 class="mb-1" style="color: #2D6B3C;">Documentos de Educación</h4>
                    <p class="text-muted mb-0">@nombreCompletoDocente</p>
                </div>
            </div>
        </div>

        <!-- Información de la Educación -->
        @if (educacionActual != null)
        {
            <div class="container mt-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <h6 class="text-muted mb-1">@educacionActual.Nivel</h6>
                                <h5 class="mb-2" style="color: #2D6B3C;">@educacionActual.Titulo</h5>
                                <div class="d-flex align-items-center text-muted small">
                                    <i class="fas fa-university me-1"></i>
                                    <span class="me-3">@educacionActual.Institucion</span>
                                    @if (!string.IsNullOrEmpty(educacionActual.Especialidad))
                                    {
                                        <i class="fas fa-graduation-cap me-1"></i>
                                        <span class="me-3">@educacionActual.Especialidad</span>
                                    }
                                    @if (educacionActual.AnioInicio > 0 || educacionActual.AnioFin > 0)
                                    {
                                        <i class="fas fa-calendar me-1"></i>
                                        <span>@educacionActual.AnioInicio - @educacionActual.AnioFin</span>
                                    }
                                </div>
                            </div>
                            <div class="col-md-4 text-end">
                                <span class="badge bg-success">@ListaDocumentos.Count documento(s)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Lista de Documentos -->
        <div class="container mt-4 mb-5">
            <div class="row mb-4">
                <div class="col-12">
                    <button class="btn btn-success" @onclick="AbrirModalDocumento">
                        <i class="fas fa-plus"></i> Agregar Documento
                    </button>
                </div>
            </div>

            @if (!ListaDocumentos.Any())
            {
                <div class="text-center py-5">
                    <div class="mb-3">
                        <i class="fas fa-file-alt fa-3x text-muted"></i>
                    </div>
                    <h5 class="text-muted">No hay documentos registrados</h5>
                    <p class="text-muted">Los documentos de educación pueden incluir diplomas, certificados, transcripciones o títulos.</p>
                    <button class="btn btn-outline-secondary" @onclick="VolverAEducacion">
                        <i class="fas fa-arrow-left"></i> Volver a Educación
                    </button>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var documento in ListaDocumentos)
                    {
                        <div class="col-12 mb-3">
                            <div class="card border-0 shadow-sm document-card">
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col-md-8">
                                            <div class="d-flex align-items-start">
                                                <div class="me-3">
                                                    <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                                         style="width: 45px; height: 45px; background-color: #E1F4FF;">
                                                        <i class="fas fa-file-pdf" style="color: #DC3545;"></i>
                                                    </div>
                                                </div>
                                                <div class="flex-grow-1">
                                                    <h6 class="card-title mb-1">@documento.Titulo</h6>
                                                    @if (!string.IsNullOrEmpty(documento.Descripcion))
                                                    {
                                                        <p class="text-muted mb-2 small">@documento.Descripcion</p>
                                                    }
                                                    <div class="d-flex align-items-center text-muted small">
                                                        <i class="fas fa-calendar me-1"></i>
                                                        <span class="me-3">Subido: @documento.FechaSubida.ToString("dd/MM/yyyy")</span>
                                                        <i class="fas fa-clock me-1"></i>
                                                        <span>@documento.FechaSubida.ToString("HH:mm")</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4 text-end">
                                            <div class="btn-group" role="group">
                                                <a href="@documento.Url" target="_blank" class="btn btn-outline-primary btn-sm">
                                                    <i class="fas fa-external-link-alt"></i> Ver Documento
                                                </a>
                                                <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmarEliminar(documento)">
                                                    <i class="fas fa-trash"></i> Eliminar
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<!-- Modal de Confirmación -->
@if (MostrarModalConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalConfirmacion"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar el documento <strong>@DocumentoAEliminar?.Titulo</strong>?</p>
                    <p class="text-danger small">Esta acción no se puede deshacer y el archivo se eliminará permanentemente.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConfirmacion">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarDocumento">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para Agregar Documento -->
<div class="modal fade @(MostrarModalDocumento ? "show" : "")" style="display: @(MostrarModalDocumento ? "block" : "none")" tabindex="-1" role="dialog" aria-hidden="@(!MostrarModalDocumento)">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #2D6B3C; color: white;">
                <h5 class="modal-title">Agregar Documento</h5>
                <button type="button" class="btn-close btn-close-white" @onclick="CerrarModalDocumento"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="titulo" class="form-label">Título del Documento</label>
                    <input type="text" class="form-control" id="titulo" @bind="NuevoDocumento.Titulo" />
                </div>
                <div class="mb-3">
                    <label for="descripcion" class="form-label">Descripción (opcional)</label>
                    <textarea class="form-control" id="descripcion" rows="3" @bind="NuevoDocumento.Descripcion"></textarea>
                </div>
                <div class="mb-3">
                    <label for="archivo" class="form-label">Archivo (máx. 50MB)</label>
                    <InputFile class="form-control" OnChange="OnFileSelected" accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
                    @if (!string.IsNullOrEmpty(MensajeArchivo))
                    {
                        <div class="@(EsErrorArchivo ? "text-danger" : "text-success") mt-2">
                            @MensajeArchivo
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CerrarModalDocumento">Cancelar</button>
                <button type="button" class="btn btn-success" @onclick="SubirDocumento" disabled="@(SubiendoArchivo || ArchivoSeleccionado == null)">
                    @if (SubiendoArchivo)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Subiendo...</span>
                    }
                    else
                    {
                        <span>Subir Documento</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int IdDocente { get; set; }
    [Parameter] public int IdEducacion { get; set; }
    
    private List<E_Documento> ListaDocumentos = new();
    private EducacionDTO? educacionActual;
    private string nombreCompletoDocente = "";
    private string numeroEmpleado = "";
    private bool CargandoDocumentos = true;
    
    // Modal de confirmación
    private bool MostrarModalConfirmacion = false;
    private E_Documento? DocumentoAEliminar;

    private bool MostrarModalDocumento = false;
    private class NuevoDocumentoModel
    {
        public string? Titulo { get; set; }
        public string? Descripcion { get; set; }
    }
    private NuevoDocumentoModel NuevoDocumento = new();

    private string MensajeArchivo = "";
    private bool EsErrorArchivo = false;
    private IBrowserFile? ArchivoSeleccionado;
    private bool SubiendoArchivo = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IdDocente > 0 && IdEducacion > 0)
        {
            await CargarDatos();
        }
    }

    private async Task CargarDatos()
    {
        try
        {
            CargandoDocumentos = true;
            StateHasChanged();

            // Cargar docente
            var resultadoDocente = await DocenteServicios.ObtenerDocente<DocenteDTO>(IdDocente);
            if (resultadoDocente.Resultado && resultadoDocente.Entidad != null)
            {
                var docente = resultadoDocente.Entidad;
                nombreCompletoDocente = $"{docente.NombreDocente} {docente.PaternoDocente} {docente.MaternoDocente}".Trim();
                numeroEmpleado = docente.NumeroEmpleado ?? "";
            }

            // Cargar información de la educación
            var educaciones = await EducacionServicios.GetAllAsync();
            if (educaciones != null)
            {
                var educacion = educaciones.FirstOrDefault(e => e.IdEducacion == IdEducacion && e.IdDocente == IdDocente);
                if (educacion != null)
                {
                    educacionActual = new EducacionDTO
                    {
                        IdEducacion = educacion.IdEducacion,
                        IdDocente = educacion.IdDocente,
                        Nivel = educacion.Nivel,
                        Titulo = educacion.Titulo,
                        Institucion = educacion.Institucion,
                        Especialidad = educacion.Especialidad,
                        Pais = educacion.Pais,
                        AnioInicio = educacion.AnioInicio,
                        AnioFin = educacion.AnioFin,
                        NombreDocente = nombreCompletoDocente
                    };
                }
            }

            // Cargar documentos
            var documentos = await DocumentoServicios.GetAllAsync();
            if (documentos != null)
            {
                ListaDocumentos = documentos
                    .Where(d => d.IdDocente == IdDocente && d.IdEducacion == IdEducacion)
                    .OrderByDescending(d => d.FechaSubida)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            CargandoDocumentos = false;
            StateHasChanged();
        }
    }

    private void ConfirmarEliminar(E_Documento documento)
    {
        DocumentoAEliminar = documento;
        MostrarModalConfirmacion = true;
        StateHasChanged();
    }

    private void CerrarModalConfirmacion()
    {
        MostrarModalConfirmacion = false;
        DocumentoAEliminar = null;
        StateHasChanged();
    }

    private async Task EliminarDocumento()
    {
        if (DocumentoAEliminar != null)
        {
            try
            {
                // Extraer el ID de Drive de la URL
                string? driveId = null;
                if (!string.IsNullOrEmpty(DocumentoAEliminar.Url))
                {
                    try
                    {
                        var uri = new Uri(DocumentoAEliminar.Url);
                        if (uri.Host.Contains("drive.google.com"))
                        {
                            // Formato 1: https://drive.google.com/file/d/FILE_ID/view
                            // Formato 2: https://drive.google.com/uc?id=FILE_ID
                            if (uri.AbsolutePath.Contains("/file/d/"))
                            {
                                driveId = uri.AbsolutePath.Split("/file/d/")[1].Split('/')[0];
                            }
                            else if (uri.Query.Contains("id="))
                            {
                                driveId = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("id");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        await JSRuntime.InvokeVoidAsync("console.error", $"Error al extraer ID de Drive: {ex.Message}");
                    }
                }

                // Si encontramos el ID de Drive, intentar eliminar primero de Drive
                if (!string.IsNullOrEmpty(driveId))
                {
                    try
                    {
                        var eliminadoDeDrive = await DocumentRepository.EliminarDocumentoAsync(driveId);
                        if (!eliminadoDeDrive)
                        {
                            if (!await JSRuntime.InvokeAsync<bool>("confirm", 
                                "No se pudo eliminar el archivo de Google Drive. ¿Desea continuar y eliminar solo la referencia en la base de datos?"))
                            {
                                return;
                            }
                        }
                    }
                    catch (Exception driveEx)
                    {
                        if (!await JSRuntime.InvokeAsync<bool>("confirm", 
                            $"Error al eliminar de Google Drive: {driveEx.Message}\n\n¿Desea continuar y eliminar solo la referencia en la base de datos?"))
                        {
                            return;
                        }
                    }
                }

                // Eliminar de la base de datos
                await DocumentoServicios.DeleteAsync(DocumentoAEliminar.IdDocumento);
                await JSRuntime.InvokeVoidAsync("alert", "Documento eliminado correctamente");
                await CargarDatos();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
            finally
            {
                CerrarModalConfirmacion();
            }
        }
    }

    private void VolverAEducacion()
    {
        NavigationManager.NavigateTo($"/CV/Docentes/{IdDocente}/Educacion");
    }

    private void AbrirModalDocumento()
    {
        NuevoDocumento = new NuevoDocumentoModel();
        MostrarModalDocumento = true;
        StateHasChanged();
    }

    private void CerrarModalDocumento()
    {
        MostrarModalDocumento = false;
        ArchivoSeleccionado = null;
        MensajeArchivo = "";
        EsErrorArchivo = false;
        StateHasChanged();
    }

    private async Task SubirDocumento()
    {
        if (ArchivoSeleccionado == null || string.IsNullOrWhiteSpace(NuevoDocumento.Titulo))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Por favor complete los campos requeridos");
            return;
        }

        try
        {
            SubiendoArchivo = true;
            StateHasChanged();

            // Preparar el archivo para subir
            using var stream = ArchivoSeleccionado.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var fileData = ms.ToArray();

            // Subir a Google Drive
            var response = await DocumentRepository.SubirDocumentoAsync(
                fileData,
                ArchivoSeleccionado.Name,
                ArchivoSeleccionado.ContentType,
                nombreCompletoDocente,
                numeroEmpleado,
                DocumentType.Educacion);

            if (string.IsNullOrEmpty(response?.Url))
            {
                throw new Exception("No se pudo obtener la URL del documento subido");
            }

            // Guardar en la base de datos
            await DocumentoServicios.CreateDocumentoForEducacionAsync(
                IdDocente,
                IdEducacion,
                NuevoDocumento.Titulo.Trim(),
                response.Url,
                NuevoDocumento.Descripcion?.Trim() ?? "Documento de educación"
            );

            await JSRuntime.InvokeVoidAsync("alert", "Documento guardado correctamente");
            await CargarDatos();
            CerrarModalDocumento();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al subir el documento: {ex.Message}");
        }
        finally
        {
            SubiendoArchivo = false;
            StateHasChanged();
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        ArchivoSeleccionado = e.File;
        MensajeArchivo = "";
        EsErrorArchivo = false;
        StateHasChanged();
    }
}

<style>
    .document-card {
        transition: all 0.3s ease;
        border-left: 4px solid #E9ECEF;
    }

    .document-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(45, 107, 60, 0.15) !important;
        border-left-color: #2D6B3C;
    }

    .document-card .card-title {
        font-size: 1rem;
        font-weight: 600;
        color: #2D6B3C;
        line-height: 1.3;
    }

    .document-card .btn-sm {
        font-size: 0.8rem;
        padding: 0.4rem 0.8rem;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .document-card .card-body {
            padding: 1rem;
        }
        
        .document-card .btn-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style> 