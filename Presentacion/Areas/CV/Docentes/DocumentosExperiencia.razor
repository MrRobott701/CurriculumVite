@page "/CV/Docentes/{idDocente:int}/Experiencia/{idExperiencia:int}/Documentos"
@using Entidades.DTO.CurriculumVite
@using Entidades.Modelos.CurriculumVite
@using Servicios.IRepositorios.CurriculumVite
@inject ISRepositorioDocumento DocumentoServicios
@inject ISRepositorioExperiencia ExperienciaServicios
@inject ISDocenteRepositorio DocenteServicios
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Documentos de Experiencia - UABC</PageTitle>

<div class="container-fluid" style="background-color: #F8F9FA; min-height: 100vh; padding: 0;">
    @if (CargandoDocumentos)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="text-center">
                <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-3 text-muted">Cargando documentos de experiencia...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Header con breadcrumb -->
        <div class="bg-white border-bottom" style="padding: 1.5rem 2rem;">
            <nav aria-label="breadcrumb" class="mb-2">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item">
                        <a href="/CV/Docentes" class="text-decoration-none" style="color: #2D6B3C;">
                            <i class="fas fa-chalkboard-teacher me-1"></i>Docentes
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <span style="color: #6c757d;">@NombreDocente</span>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/CV/Docentes/@IdDocente/Experiencia" class="text-decoration-none" style="color: #2D6B3C;">Experiencia</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page" style="color: #2D6B3C;">Documentos</li>
                </ol>
            </nav>
            <h1 class="h2 mb-1" style="color: #2D6B3C; font-weight: 600;">
                <i class="fas fa-file-alt me-3" style="color: #4BB463;"></i>
                Documentos de Experiencia
            </h1>
            @if (ExperienciaActual != null)
            {
                <p class="text-muted mb-0">
                    Experiencia: <strong>@ExperienciaActual.Puesto</strong> 
                    @if (!string.IsNullOrEmpty(ExperienciaActual.Institucion))
                    {
                        <span> en @ExperienciaActual.Institucion</span>
                    }
                </p>
            }
        </div>

        <!-- Contenido principal -->
        <div style="padding: 2rem;">
            @if (!DocumentosDeExperiencia.Any())
            {
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <div class="mb-4">
                            <i class="fas fa-file-alt" style="font-size: 4rem; color: #E9ECEF;"></i>
                        </div>
                        <h4 class="text-muted">No hay documentos para esta experiencia</h4>
                        <p class="text-muted mb-4">
                            Los documentos se pueden agregar desde el formulario de edici贸n de experiencia.
                        </p>
                        <button class="btn btn-outline-secondary" @onclick="RegresarAExperiencia">
                            <i class="fas fa-arrow-left"></i> Volver a Experiencia
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-12 mb-4">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header" style="background-color: #2D6B3C; color: white;">
                                <h5 class="mb-0">
                                    <i class="fas fa-file-alt me-2"></i>
                                    Documentos de Evidencia (@DocumentosDeExperiencia.Count())
                                </h5>
                            </div>
                            <div class="card-body p-0">
                                @foreach (var documento in DocumentosDeExperiencia)
                                {
                                    <div class="document-card border-bottom p-3">
                                        <div class="row align-items-center">
                                            <div class="col-md-8">
                                                <div class="d-flex align-items-center">
                                                    <div class="document-icon me-3">
                                                        <i class="fas fa-file-pdf" style="color: #DC3545; font-size: 2rem;"></i>
                                                    </div>
                                                    <div>
                                                        <h6 class="mb-1" style="color: #2D6B3C;">@documento.Titulo</h6>
                                                        @if (!string.IsNullOrEmpty(documento.Descripcion))
                                                        {
                                                            <p class="text-muted small mb-1">@documento.Descripcion</p>
                                                        }
                                                        <small class="text-muted">
                                                            <i class="fas fa-calendar me-1"></i>
                                                            Subido: @documento.FechaSubida.ToString("dd/MM/yyyy HH:mm")
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4 text-end">
                                                <div class="btn-group" role="group">
                                                    <a href="@documento.Url" target="_blank" class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-eye"></i> Ver
                                                    </a>
                                                    <a href="@documento.Url" download class="btn btn-outline-success btn-sm">
                                                        <i class="fas fa-download"></i> Descargar
                                                    </a>
                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => EliminarDocumento(documento)">
                                                        <i class="fas fa-trash"></i> Eliminar
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Bot贸n de regreso -->
            <div class="row">
                <div class="col-12">
                    <div class="card border-0">
                        <div class="card-body text-center">
                            <button class="btn btn-secondary" @onclick="RegresarAExperiencia">
                                <i class="fas fa-arrow-left me-2"></i>Regresar a Experiencia
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .document-card:hover {
        background-color: #F8F9FA;
        transition: background-color 0.2s;
    }
    
    .document-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 60px;
        height: 60px;
        background-color: #F8F9FA;
        border-radius: 8px;
    }
    
    .btn-group .btn {
        margin: 0 2px;
    }
    
    /* Responsive */
    @@media (max-width: 768px) {
        .document-card .card-body {
            padding: 1rem;
        }
        
        .document-card .btn-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style>

@code {
    [Parameter] public int IdDocente { get; set; }
    [Parameter] public int IdExperiencia { get; set; }

    private bool CargandoDocumentos = true;
    private List<E_Documento> DocumentosDeExperiencia = new();
    private E_Experiencia? ExperienciaActual;
    private string NombreDocente = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarDatos();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            CargandoDocumentos = false;
            StateHasChanged();
        }
    }

    private async Task CargarDatos()
    {
        // Cargar informaci贸n del docente
        var resultadoDocente = await DocenteServicios.ObtenerDocente<DocenteDTO>(IdDocente);
        if (resultadoDocente.Resultado && resultadoDocente.Entidad != null)
        {
            var docente = resultadoDocente.Entidad;
            NombreDocente = $"{docente.NombreDocente} {docente.PaternoDocente} {docente.MaternoDocente}".Trim();
        }

        // Cargar informaci贸n de la experiencia
        var todasExperiencias = await ExperienciaServicios.GetAllAsync();
        ExperienciaActual = todasExperiencias.FirstOrDefault(e => e.IdExperiencia == IdExperiencia);

        // Cargar documentos de experiencia
        // Nota: Como la BD no tiene IdExperiencia en Documento, buscamos por descripci贸n que contenga el ID
        var todosDocumentos = await DocumentoServicios.GetAllAsync();
        DocumentosDeExperiencia = todosDocumentos
            .Where(d => d.IdDocente == IdDocente && 
                       !string.IsNullOrEmpty(d.Descripcion) && 
                       d.Descripcion.Contains($"ID Experiencia: {IdExperiencia}"))
            .OrderByDescending(d => d.FechaSubida)
            .ToList();
    }

    private async Task EliminarDocumento(E_Documento documento)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"驴Est谩 seguro de que desea eliminar el documento '{documento.Titulo}'?");
        
        if (confirmado)
        {
            try
            {
                await DocumentoServicios.DeleteAsync(documento.IdDocumento);
                await JSRuntime.InvokeVoidAsync("alert", "Documento eliminado correctamente");
                await CargarDatos();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar documento: {ex.Message}");
            }
        }
    }

    private void RegresarAExperiencia()
    {
        NavigationManager.NavigateTo($"/CV/Docentes/{IdDocente}/Experiencia");
    }
} 