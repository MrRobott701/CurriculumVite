@page "/CV/Docentes/{idDocente:int}/Ver/Educacion"
@using Entidades.DTO.CurriculumVite
@using Servicios.IRepositorios.CurriculumVite
@inject ISRepositorioEducacion EducacionServicios
@inject ISDocenteRepositorio DocenteServicios
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Educación - UABC</PageTitle>

<div class="container-fluid" style="background-color: #F8F9FA; min-height: 100vh; padding: 0;">
    @if (CargandoEducacion)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="text-center">
                <div class="spinner-border text-success" role="status" style="color: #2D6B3C !important;">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-3 text-muted">Cargando formación académica...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="container-fluid py-4" style="background: linear-gradient(135deg, #2D6B3C 0%, #4BB463 100%); color: white;">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-2" style="--bs-breadcrumb-divider-color: rgba(255,255,255,0.6);">
                                <li class="breadcrumb-item">
                                    <a href="/CV/Docentes" style="color: rgba(255,255,255,0.8); text-decoration: none;">
                                        <i class="fas fa-users"></i> Docentes
                                    </a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="/CV/Docentes/Ver/@IdDocente" style="color: rgba(255,255,255,0.8); text-decoration: none;">
                                        @NombreDocente
                                    </a>
                                </li>
                                <li class="breadcrumb-item active" style="color: white;">Educación</li>
                            </ol>
                        </nav>
                        <h1 class="mb-0">
                            <i class="fas fa-graduation-cap"></i> Formación Académica de @NombreDocente
                        </h1>
                        <p class="mb-0 opacity-75">Vista de toda la formación educativa</p>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-light" @onclick="RegresarAlPerfil">
                            <i class="fas fa-arrow-left"></i> Regresar al Perfil
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Estadísticas -->
        <div class="container mt-4">
            <div class="row">
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #E8F5E8;">
                                    <i class="fas fa-graduation-cap" style="color: #2D6B3C; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #2D6B3C;">@ListaEducacion.Count</h3>
                            <p class="text-muted mb-0 small">Total Estudios</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #FDF4E1;">
                                    <i class="fas fa-award" style="color: #F4BF3A; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #F4BF3A;">@ListaEducacion.Select(e => e.Nivel).Distinct().Count()</h3>
                            <p class="text-muted mb-0 small">Niveles Diferentes</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #E1F4FF;">
                                    <i class="fas fa-university" style="color: #4BB463; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #4BB463;">@ListaEducacion.Select(e => e.Institucion).Distinct().Count()</h3>
                            <p class="text-muted mb-0 small">Instituciones</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #F3E8FF;">
                                    <i class="fas fa-globe" style="color: #8B5CF6; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #8B5CF6;">@ListaEducacion.Select(e => e.Pais).Distinct().Count()</h3>
                            <p class="text-muted mb-0 small">Países</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filtros -->
        <div class="container mt-4">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row align-items-end">
                        <div class="col-md-4">
                            <label class="form-label small text-muted">Buscar formación</label>
                            <input type="text" class="form-control" @bind="FiltroTexto" @bind:event="oninput" 
                                   placeholder="Buscar por título, institución, especialidad...">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small text-muted">Filtrar por nivel</label>
                            <select class="form-select" @bind="FiltroNivel">
                                <option value="">Todos los niveles</option>
                                @foreach (var nivel in ListaEducacion.Select(e => e.Nivel).Distinct().Where(n => !string.IsNullOrEmpty(n)))
                                {
                                    <option value="@nivel">@nivel</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small text-muted">Ordenar por</label>
                            <select class="form-select" @bind="OrdenarPor">
                                <option value="anio">Año (más reciente)</option>
                                <option value="nivel">Nivel educativo</option>
                                <option value="institucion">Institución</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="LimpiarFiltros">
                                <i class="fas fa-eraser"></i> Limpiar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de Educación -->
        <div class="container mt-4 mb-5">
            @if (!EducacionFiltrada.Any())
            {
                <div class="text-center py-5">
                    <div class="mb-3">
                        <i class="fas fa-graduation-cap fa-3x text-muted"></i>
                    </div>
                    <h5 class="text-muted">No se encontró formación académica</h5>
                    <p class="text-muted">@(string.IsNullOrEmpty(FiltroTexto) ? "Este docente no tiene estudios registrados" : "Intenta con otros términos de búsqueda")</p>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var educacion in EducacionFiltrada)
                    {
                        <div class="col-12 mb-3">
                            <div class="card border-0 shadow-sm education-card">
                                <div class="card-body">
                                    <div class="row align-items-start">
                                        <div class="col-md-12">
                                            <div class="d-flex align-items-start mb-2">
                                                <div class="me-3">
                                                    <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                                         style="width: 45px; height: 45px; background-color: #E8F5E8;">
                                                        <i class="fas fa-graduation-cap" style="color: #2D6B3C;"></i>
                                                    </div>
                                                </div>
                                                <div class="flex-grow-1">
                                                    <h5 class="card-title mb-1">@educacion.Titulo</h5>
                                                    <p class="text-primary mb-1">
                                                        <i class="fas fa-university me-1"></i>@educacion.Institucion
                                                    </p>
                                                    <div class="d-flex align-items-center text-muted small mb-2 flex-wrap">
                                                        <span class="me-3">
                                                            <i class="fas fa-award me-1"></i>@educacion.Nivel
                                                        </span>
                                                        @if (!string.IsNullOrEmpty(educacion.Especialidad))
                                                        {
                                                            <span class="me-3">
                                                                <i class="fas fa-microscope me-1"></i>@educacion.Especialidad
                                                            </span>
                                                        }
                                                        @if (!string.IsNullOrEmpty(educacion.Pais))
                                                        {
                                                            <span class="me-3">
                                                                <i class="fas fa-globe me-1"></i>@educacion.Pais
                                                            </span>
                                                        }
                                                        <span class="me-3">
                                                            <i class="fas fa-calendar me-1"></i>@educacion.PeriodoFormateado
                                                        </span>
                                                        @if (educacion.DuracionAnios > 0)
                                                        {
                                                            <span>
                                                                <i class="fas fa-clock me-1"></i>@educacion.DuracionAnios año@(educacion.DuracionAnios > 1 ? "s" : "")
                                                            </span>
                                                        }
                                                    </div>
                                                    <div class="d-flex align-items-center gap-2">
                                                        <span class="badge" style="background-color: @GetColorNivel(educacion.Nivel);">@educacion.Nivel</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public int IdDocente { get; set; }
    
    private List<EducacionDTO> ListaEducacion = new();
    private List<EducacionDTO> EducacionFiltrada = new();
    private string NombreDocente = "";
    private bool CargandoEducacion = true;
    
    // Filtros
    private string FiltroTexto = "";
    private string FiltroNivel = "";
    private string OrdenarPor = "anio";

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IdDocente > 0)
        {
            await CargarDatos();
        }
    }

    private async Task CargarDatos()
    {
        try
        {
            CargandoEducacion = true;
            StateHasChanged();

            // Cargar docente
            var resultadoDocente = await DocenteServicios.ObtenerDocente<DocenteDTO>(IdDocente);
            if (resultadoDocente.Resultado && resultadoDocente.Entidad != null)
            {
                var docente = resultadoDocente.Entidad;
                NombreDocente = $"{docente.NombreDocente} {docente.PaternoDocente} {docente.MaternoDocente}".Trim();
            }

            // Cargar educación
            var educacion = await EducacionServicios.GetAllAsync();
            if (educacion != null)
            {
                ListaEducacion = educacion
                    .Where(e => e.IdDocente == IdDocente)
                    .Select(e => new EducacionDTO
                    {
                        IdEducacion = e.IdEducacion,
                        IdDocente = e.IdDocente,
                        Nivel = e.Nivel,
                        Titulo = e.Titulo,
                        Institucion = e.Institucion,
                        Especialidad = e.Especialidad,
                        Pais = e.Pais,
                        AnioInicio = e.AnioInicio,
                        AnioFin = e.AnioFin,
                        NombreDocente = NombreDocente
                    })
                    .ToList();
                    
                AplicarFiltros();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            CargandoEducacion = false;
            StateHasChanged();
        }
    }

    private void AplicarFiltros()
    {
        var educacionFiltrada = ListaEducacion.AsEnumerable();

        // Filtro por texto
        if (!string.IsNullOrEmpty(FiltroTexto))
        {
            educacionFiltrada = educacionFiltrada.Where(e =>
                (e.Titulo?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.Institucion?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.Especialidad?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.Nivel?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.Pais?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        // Filtro por nivel
        if (!string.IsNullOrEmpty(FiltroNivel))
        {
            educacionFiltrada = educacionFiltrada.Where(e => e.Nivel == FiltroNivel);
        }

        // Ordenar
        educacionFiltrada = OrdenarPor switch
        {
            "nivel" => educacionFiltrada.OrderBy(e => GetOrdenNivel(e.Nivel)).ThenByDescending(e => e.AnioFin),
            "institucion" => educacionFiltrada.OrderBy(e => e.Institucion).ThenByDescending(e => e.AnioFin),
            _ => educacionFiltrada.OrderByDescending(e => e.AnioFin).ThenByDescending(e => e.AnioInicio)
        };

        EducacionFiltrada = educacionFiltrada.ToList();
        StateHasChanged();
    }

    private void LimpiarFiltros()
    {
        FiltroTexto = "";
        FiltroNivel = "";
        OrdenarPor = "anio";
        AplicarFiltros();
    }

    private void RegresarAlPerfil()
    {
        NavigationManager.NavigateTo($"/CV/Docentes/Ver/{IdDocente}");
    }

    private string GetColorNivel(string? nivel)
    {
        return nivel?.ToLower() switch
        {
            var n when n?.Contains("doctorado") == true => "#8B5CF6",
            var n when n?.Contains("maestr") == true => "#4BB463",
            var n when n?.Contains("licenciatur") == true => "#F4BF3A",
            var n when n?.Contains("ingenier") == true => "#F4BF3A",
            var n when n?.Contains("especializaci") == true => "#2D6B3C",
            _ => "#6B7280"
        };
    }

    private int GetOrdenNivel(string? nivel)
    {
        return nivel?.ToLower() switch
        {
            var n when n?.Contains("doctorado") == true => 4,
            var n when n?.Contains("maestr") == true => 3,
            var n when n?.Contains("especializaci") == true => 2,
            var n when n?.Contains("licenciatur") == true => 1,
            var n when n?.Contains("ingenier") == true => 1,
            _ => 0
        };
    }
}

<style>
    .education-card {
        transition: all 0.3s ease;
        border-left: 4px solid #E9ECEF;
    }

    .education-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(45, 107, 60, 0.15) !important;
        border-left-color: #2D6B3C;
    }

    .education-card .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2D6B3C;
        line-height: 1.3;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .badge {
        font-size: 0.7rem;
        font-weight: 500;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .education-card .card-body {
            padding: 1rem;
        }
        
        .d-flex.flex-wrap .me-3 {
            margin-bottom: 0.5rem;
        }
    }
</style> 