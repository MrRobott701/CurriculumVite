@page "/CV/Docentes/{idDocente:int}/Experiencia"
@using Entidades.DTO.CurriculumVite
@using Servicios.IRepositorios.CurriculumVite
@using Presentacion.Components.Shared
@using Servicios.IRepositorios
@using Entidades.DTO.CurriculumVite
@using Entidades.Modelos.CurriculumVite
@inject ISRepositorioExperiencia ExperienciaServicios
@inject ISRepositorioDocumento DocumentoServicios
@inject IDocumentRepository DocumentRepository
@inject ISDocenteRepositorio DocenteServicios
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Gestión de Experiencia - UABC</PageTitle>

<div class="container-fluid" style="background-color: #F8F9FA; min-height: 100vh; padding: 0;">
    @if (CargandoExperiencia)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="text-center">
                <div class="spinner-border text-success" role="status" style="color: #2D6B3C !important;">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-3 text-muted">Cargando experiencia laboral...</p>
            </div>
        </div>
    }
    else
    {
        <!-- Header con breadcrumb -->
        <div class="bg-white border-bottom" style="padding: 1.5rem 2rem;">
            <nav aria-label="breadcrumb" class="mb-2">
                <ol class="breadcrumb mb-0">
                    @if (FromProfile)
                    {
                        <li class="breadcrumb-item">
                            <button type="button" class="btn btn-link p-0" @onclick="VolverAPerfilDocente" style="color: #2D6B3C; text-decoration: none;">
                                <i class="fas fa-arrow-left me-1"></i>Volver al Perfil
                            </button>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page" style="color: #2D6B3C;">
                            Experiencia - @nombreCompletoDocente
                        </li>
                    }
                    else
                    {
                        <li class="breadcrumb-item">
                            <a href="/CV/Docentes" class="text-decoration-none" style="color: #2D6B3C;">
                                <i class="fas fa-chalkboard-teacher me-1"></i>Docentes
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                            <span style="color: #6c757d;">@nombreCompletoDocente</span>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="/CV/Docentes/@IdDocente/Educacion" class="text-decoration-none" style="color: #2D6B3C;">Educación</a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page" style="color: #2D6B3C;">Experiencia</li>
                    }
                </ol>
            </nav>
        </div>

        <!-- Estadísticas -->
        <div class="container mt-4">
            <div class="row">
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #E8F5E8;">
                                    <i class="fas fa-briefcase" style="color: #2D6B3C; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #2D6B3C;">@ListaExperiencia.Count</h3>
                            <p class="text-muted mb-0 small">Total Experiencias</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #FDF4E1;">
                                    <i class="fas fa-calendar-check" style="color: #F4BF3A; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #F4BF3A;">@ListaExperiencia.Count(e => e.EsActual)</h3>
                            <p class="text-muted mb-0 small">Actuales</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #E1F4FF;">
                                    <i class="fas fa-building" style="color: #4BB463; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #4BB463;">@ListaExperiencia.Select(e => e.Institucion).Distinct().Count()</h3>
                            <p class="text-muted mb-0 small">Instituciones</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px; background-color: #F3E8FF;">
                                    <i class="fas fa-clock" style="color: #8B5CF6; font-size: 1.5rem;"></i>
                                </div>
                            </div>
                            <h3 class="mb-1" style="color: #8B5CF6;">@(ListaExperiencia.Any() ? Math.Round(ListaExperiencia.Average(e => e.DuracionMeses) / 12.0, 1) : 0)</h3>
                            <p class="text-muted mb-0 small">Años Promedio</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filtros -->
        <div class="container mt-4">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row align-items-end">
                        <div class="col-md-4">
                            <label class="form-label small text-muted">Buscar experiencia</label>
                            <input type="text" class="form-control" @bind="FiltroTexto" @bind:event="oninput" 
                                   placeholder="Buscar por puesto, institución...">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small text-muted">Filtrar por estado</label>
                            <select class="form-select" @bind="FiltroEstado">
                                <option value="">Todos</option>
                                <option value="actual">Actuales</option>
                                <option value="pasada">Pasadas</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small text-muted">Ordenar por</label>
                            <select class="form-select" @bind="OrdenarPor">
                                <option value="fecha">Fecha (más reciente)</option>
                                <option value="puesto">Puesto</option>
                                <option value="institucion">Institución</option>
                                <option value="duracion">Duración</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="LimpiarFiltros">
                                <i class="fas fa-eraser"></i> Limpiar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de Experiencias -->
        <div class="container mt-4 mb-5">
            @if (!ExperienciasFiltradas.Any())
            {
                <div class="text-center py-5">
                    <div class="mb-3">
                        <i class="fas fa-briefcase fa-3x text-muted"></i>
                    </div>
                    <h5 class="text-muted">No se encontraron experiencias laborales</h5>
                    <p class="text-muted">@(string.IsNullOrEmpty(FiltroTexto) ? "Comienza agregando la primera experiencia laboral" : "Intenta con otros términos de búsqueda")</p>
                    @if (string.IsNullOrEmpty(FiltroTexto))
                    {
                        <button class="btn btn-success" @onclick="AbrirModalAgregar">
                            <i class="fas fa-plus"></i> Agregar Primera Experiencia
                        </button>
                    }
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var experiencia in ExperienciasFiltradas)
                    {
                        <div class="col-12 mb-3">
                            <div class="card border-0 shadow-sm experience-card">
                                <div class="card-body">
                                    <div class="row align-items-start">
                                        <div class="col-md-8">
                                            <div class="d-flex align-items-start mb-2">
                                                <div class="me-3">
                                                    <div class="rounded-circle d-flex align-items-center justify-content-center" 
                                                         style="width: 45px; height: 45px; background-color: #E8F5E8;">
                                                        <i class="fas fa-briefcase" style="color: #2D6B3C;"></i>
                                                    </div>
                                                </div>
                                                <div class="flex-grow-1">
                                                    <h5 class="card-title mb-1">@experiencia.Puesto</h5>
                                                    <p class="text-primary mb-1">
                                                        <i class="fas fa-building me-1"></i>@experiencia.Institucion
                                                    </p>
                                                    <div class="d-flex align-items-center text-muted small">
                                                        <i class="fas fa-calendar me-1"></i>
                                                        <span class="me-3">@experiencia.PeriodoFormateado</span>
                                                        <i class="fas fa-clock me-1"></i>
                                                        <span>@experiencia.DuracionFormateada</span>
                                                        @if (experiencia.EsActual)
                                                        {
                                                            <span class="badge bg-success ms-2">Actual</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            @if (!string.IsNullOrEmpty(experiencia.Descripcion))
                                            {
                                                <p class="card-text text-muted small mb-0">
                                                    @((MarkupString)experiencia.Descripcion.Replace("\n", "<br>"))
                                                </p>
                                            }
                                        </div>
                                        <div class="col-md-4 text-end">
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => AbrirModalEditar(experiencia)">
                                                    <i class="fas fa-edit"></i> Editar
                                                </button>
                                                <button class="btn btn-outline-info btn-sm" @onclick="() => VerDocumentosExperiencia(experiencia)">
                                                    <i class="fas fa-file-alt"></i> Documentos
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmarEliminar(experiencia)">
                                                    <i class="fas fa-trash"></i> Eliminar
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Navegación -->
        <div class="container mb-4">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <button class="btn btn-outline-secondary me-3" @onclick="RegresarAEducacion">
                                    <i class="fas fa-arrow-left"></i> Regresar a Educación
                                </button>
                                <span class="text-muted">Paso 3 de 4 completado</span>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="d-flex align-items-center justify-content-end">
                                <span class="text-muted me-3">@ListaExperiencia.Count experiencia(s) registrada(s)</span>
                                <button class="btn" style="background-color: #2D6B3C; color: white;" @onclick="ContinuarAProyectos">
                                    Continuar a Proyectos <i class="fas fa-arrow-right"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal de Experiencia -->
<ModalExperiencia @ref="modalExperiencia" 
                  OnExperienciaGuardada="OnExperienciaGuardada" 
                  IdDocente="IdDocente"
                  EmpleadoNombre="@nombreCompletoDocente"
                  NumeroEmpleado="@numeroEmpleado" />

<!-- Modal de Confirmación -->
@if (MostrarModalConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalConfirmacion"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar la experiencia laboral <strong>@ExperienciaAEliminar?.Puesto</strong> en <strong>@ExperienciaAEliminar?.Institucion</strong>?</p>
                    <p class="text-danger small">Esta acción no se puede deshacer.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConfirmacion">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarExperiencia">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int IdDocente { get; set; }
    
    private List<ExperienciaDTO> ListaExperiencia = new();
    private List<ExperienciaDTO> ExperienciasFiltradas = new();
    private string NombreDocente = "";
    private string nombreCompletoDocente = "";
    private bool CargandoExperiencia = true;
    private ModalExperiencia? modalExperiencia;
    private string numeroEmpleado = "";
    
    // Detectar si viene del perfil del docente
    private bool FromProfile = false;
    
    // Filtros
    private string FiltroTexto = "";
    private string FiltroEstado = "";
    private string OrdenarPor = "fecha";
    
    // Modal de confirmación
    private bool MostrarModalConfirmacion = false;
    private ExperienciaDTO? ExperienciaAEliminar;

    protected override async Task OnInitializedAsync()
    {
        // Detectar si viene del perfil del docente
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        FromProfile = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).ContainsKey("fromProfile");

        await CargarDatos();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IdDocente > 0)
        {
            await CargarDatos();
        }
    }

    private async Task CargarDatos()
    {
        try
        {
            CargandoExperiencia = true;
            StateHasChanged();

            // Cargar docente
            var resultadoDocente = await DocenteServicios.ObtenerDocente<DocenteDTO>(IdDocente);
            if (resultadoDocente.Resultado && resultadoDocente.Entidad != null)
            {
                var docente = resultadoDocente.Entidad;
                NombreDocente = $"{docente.NombreDocente} {docente.PaternoDocente} {docente.MaternoDocente}".Trim();
                nombreCompletoDocente = NombreDocente;
                numeroEmpleado = docente.NumeroEmpleado ?? "";
            }

            // Cargar experiencias - usando GetAllAsync y luego filtrando
            var experiencias = await ExperienciaServicios.GetAllAsync();
            if (experiencias != null)
            {
                // Mapear a DTOs manualmente
                ListaExperiencia = experiencias
                    .Where(e => e.IdDocente == IdDocente)
                    .Select(e => new ExperienciaDTO
                    {
                        IdExperiencia = e.IdExperiencia,
                        IdDocente = e.IdDocente,
                        Puesto = e.Puesto,
                        Institucion = e.Institucion,
                        Descripcion = e.Descripcion,
                        FechaInicio = e.FechaInicio,
                        FechaFin = e.FechaFin,
                        NombreDocente = NombreDocente
                    })
                    .ToList();
                    
                AplicarFiltros();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            CargandoExperiencia = false;
            StateHasChanged();
        }
    }

    private void AplicarFiltros()
    {
        var experienciasFiltradas = ListaExperiencia.AsEnumerable();

        // Filtro por texto
        if (!string.IsNullOrEmpty(FiltroTexto))
        {
            experienciasFiltradas = experienciasFiltradas.Where(e =>
                (e.Puesto?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.Institucion?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (e.Descripcion?.Contains(FiltroTexto, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        // Filtro por estado
        if (!string.IsNullOrEmpty(FiltroEstado))
        {
            experienciasFiltradas = FiltroEstado switch
            {
                "actual" => experienciasFiltradas.Where(e => e.EsActual),
                "pasada" => experienciasFiltradas.Where(e => !e.EsActual),
                _ => experienciasFiltradas
            };
        }

        // Ordenar
        experienciasFiltradas = OrdenarPor switch
        {
            "puesto" => experienciasFiltradas.OrderBy(e => e.Puesto),
            "institucion" => experienciasFiltradas.OrderBy(e => e.Institucion),
            "duracion" => experienciasFiltradas.OrderByDescending(e => e.DuracionMeses),
            _ => experienciasFiltradas.OrderByDescending(e => e.FechaInicio ?? DateTime.MinValue)
        };

        ExperienciasFiltradas = experienciasFiltradas.ToList();
        StateHasChanged();
    }

    private void LimpiarFiltros()
    {
        FiltroTexto = "";
        FiltroEstado = "";
        OrdenarPor = "fecha";
        AplicarFiltros();
    }

    private async Task AbrirModalAgregar()
    {
        if (modalExperiencia != null)
        {
            await modalExperiencia.AbrirModal(null, IdDocente);
        }
    }

    private async Task AbrirModalEditar(ExperienciaDTO experiencia)
    {
        if (modalExperiencia != null)
        {
            await modalExperiencia.AbrirModal(experiencia);
        }
    }

    private async Task OnExperienciaGuardada()
    {
        await CargarDatos();
    }

    private void ConfirmarEliminar(ExperienciaDTO experiencia)
    {
        ExperienciaAEliminar = experiencia;
        MostrarModalConfirmacion = true;
        StateHasChanged();
    }

    private void CerrarModalConfirmacion()
    {
        MostrarModalConfirmacion = false;
        ExperienciaAEliminar = null;
        StateHasChanged();
    }

    private async Task EliminarExperiencia()
    {
        if (ExperienciaAEliminar != null)
        {
            try
            {
                // 1. Obtener todos los documentos asociados a la experiencia
                var todosDocumentos = await DocumentoServicios.GetAllAsync();
                var documentosExperiencia = todosDocumentos
                    .Where(d => d.IdDocente == IdDocente && 
                               !string.IsNullOrEmpty(d.Descripcion) && 
                               d.Descripcion.Contains($"ID Experiencia: {ExperienciaAEliminar.IdExperiencia}"))
                    .ToList();

                // 2. Eliminar cada documento de Drive y de la base de datos
                foreach (var documento in documentosExperiencia)
                {
                    if (!string.IsNullOrEmpty(documento.Url))
                    {
                        try
                        {
                            // Extraer el ID de Drive de la URL
                            string? driveId = null;
                            var uri = new Uri(documento.Url);
                            if (uri.Host.Contains("drive.google.com"))
                            {
                                if (uri.AbsolutePath.Contains("/file/d/"))
                                {
                                    driveId = uri.AbsolutePath.Split("/file/d/")[1].Split('/')[0];
                                }
                                else if (uri.Query.Contains("id="))
                                {
                                    driveId = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("id");
                                }
                            }

                            // Eliminar de Drive si se encontró el ID
                            if (!string.IsNullOrEmpty(driveId))
                            {
                                await DocumentRepository.EliminarDocumentoAsync(driveId);
                            }
                        }
                        catch (Exception ex)
                        {
                            await JSRuntime.InvokeVoidAsync("console.error", $"Error al eliminar archivo de Drive: {ex.Message}");
                            // Continuar con el siguiente documento
                        }
                    }

                    // Eliminar el documento de la base de datos
                    await DocumentoServicios.DeleteAsync(documento.IdDocumento);
                }

                // 3. Finalmente eliminar la experiencia
                await ExperienciaServicios.DeleteAsync(ExperienciaAEliminar.IdExperiencia);
                await JSRuntime.InvokeVoidAsync("alert", "Experiencia y documentos asociados eliminados exitosamente");
                await CargarDatos();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
            finally
            {
                CerrarModalConfirmacion();
            }
        }
    }

    private void RegresarAEducacion()
    {
        NavigationManager.NavigateTo($"/CV/Docentes/{IdDocente}/Educacion");
    }

    private void ContinuarAProyectos()
    {
        NavigationManager.NavigateTo($"/CV/Docentes/{IdDocente}/Proyectos");
    }

    private void VolverAPerfilDocente()
    {
        NavigationManager.NavigateTo($"/CV/Docentes/Ver/{IdDocente}");
    }

    private async Task VerDocumentosExperiencia(ExperienciaDTO experiencia)
    {
        NavigationManager.NavigateTo($"/CV/Docentes/{IdDocente}/Experiencia/{experiencia.IdExperiencia}/Documentos");
    }
}

<style>
    .experience-card {
        transition: all 0.3s ease;
        border-left: 4px solid #E9ECEF;
    }

    .experience-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(45, 107, 60, 0.15) !important;
        border-left-color: #2D6B3C;
    }

    .experience-card .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2D6B3C;
        line-height: 1.3;
    }

    .experience-card .card-text {
        line-height: 1.4;
        max-height: 60px;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
    }

    .experience-card .btn-sm {
        font-size: 0.8rem;
        padding: 0.4rem 0.8rem;
    }

    .badge {
        font-size: 0.7rem;
        font-weight: 500;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .experience-card .card-body {
            padding: 1rem;
        }
        
        .experience-card .btn-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style> 